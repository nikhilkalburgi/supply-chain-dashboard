{"version":3,"file":"static/js/837.bf96bfdb.chunk.js","mappings":"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","sources":["components/common/Error.jsx","components/common/ChartContainer.jsx","components/dashboard/DashboardHome.jsx"],"sourcesContent":["import React from \"react\";\r\nimport \"./Error.css\"; \r\n\r\nconst ErrorMessage = ({ message }) => {\r\n  return (\r\n    <div className=\"error-container\">\r\n      <div className=\"error-box\">\r\n        <p className=\"error-text\">{message || \"Something went wrong!\"}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import React from 'react';\r\nimport { Bar, Line, Pie, Bubble } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  BarElement,\r\n} from 'chart.js';\r\n\r\n// Register the necessary components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  ArcElement,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst ChartContainer = ({ type, data, options }) => {\r\n  return (\r\n    <div style={{ width: '100%', height: '100%', minWidth: 600 }}>\r\n      {type === 'bar' && <Bar data={data} options={options} />}\r\n      {type === 'line' && <Line data={data} options={options} />}\r\n      {type === 'pie' && <Pie data={data} options={options} />}\r\n      {type === 'bubble' && <Bubble data={data} options={options} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartContainer;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useMemo } from 'react';\r\nimport { useDashboardContext } from '../../context/DashboardContext';\r\nimport ChartContainer from '../common/ChartContainer';\r\nimport './DashboardHome.css'; \r\nimport Loader from '../common/Loader';\r\nimport ErrorMessage from '../common/Error';\r\n\r\nconst DashboardHome = () => {\r\n  const { state } = useDashboardContext();\r\n\r\n  // Calculate key metrics\r\n  const keyMetrics = useMemo(() => {\r\n    const totalAmount = state.data.reduce((sum, item) => sum + item.amount, 0);\r\n    const transactionCount = state.data.length;\r\n    const averageTransaction = totalAmount / transactionCount || 0;\r\n    return { totalAmount, transactionCount, averageTransaction };\r\n  }, [state.data]);\r\n\r\n  // Prepare data for the trends chart\r\n  const trendsChartData = useMemo(() => {\r\n    const labels = state.data.map(item => item.date);\r\n    const amounts = state.data.map(item => item.amount);\r\n\r\n    return {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: 'Procurement Amount Over Time',\r\n          data: amounts,\r\n          borderColor: 'var(--secondary-color)',\r\n          backgroundColor: 'var(--primary-color)',\r\n          fill: true,\r\n        },\r\n      ],\r\n    };\r\n  }, [state.data]);\r\n\r\n  // Prepare data for top suppliers/regions\r\n  const topSuppliers = useMemo(() => {\r\n    const supplierTotals = state.data.reduce((acc, item) => {\r\n      acc[item.supplier] = (acc[item.supplier] || 0) + item.amount;\r\n      return acc;\r\n    }, {});\r\n\r\n    return Object.entries(supplierTotals)\r\n      .sort((a, b) => b[1] - a[1])\r\n      .slice(0, 5);\r\n  }, [state.data]);\r\n\r\n  // Prepare data for recent transactions\r\n  const recentTransactions = useMemo(() => {\r\n    return state.data\r\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\r\n      .slice(0, 5);\r\n  }, [state.data]);\r\n\r\n  return (\r\n    <>\r\n      {state.isLoading ? <Loader /> : state.error ? <ErrorMessage message={\"Service Unavailable!\"} /> : \r\n      <div className=\"dashboard-home\">\r\n      <h2>Dashboard Overview</h2>\r\n      <div className=\"metrics-container\">\r\n        <div className=\"metric-card\">\r\n          <p>Total Procurement</p>\r\n          <h3>${keyMetrics.totalAmount.toFixed(2)}</h3>\r\n        </div>\r\n        <div className=\"metric-card\">\r\n          <p>Transactions</p>\r\n          <h3>{keyMetrics.transactionCount}</h3>\r\n        </div>\r\n        <div className=\"metric-card\">\r\n          <p>Average Transaction</p>\r\n          <h3>${keyMetrics.averageTransaction.toFixed(2)}</h3>\r\n        </div>\r\n      </div>\r\n      <div className=\"charts-container\">\r\n        <h3>Trends</h3>\r\n        <div className=\"chart-item\">\r\n          <ChartContainer type=\"line\" data={trendsChartData} options={{ responsive: true, maintainAspectRatio: false }} />\r\n        </div>\r\n      </div>\r\n      <div className='last-section'>\r\n        <div className=\"supplier-item\">\r\n          <h3>Top Suppliers</h3>\r\n            <div className=\"top-suppliers-container\">\r\n              {topSuppliers.map(([supplier, amount]) => (\r\n                <div key={supplier} className=\"supplier-card\">\r\n                  <h4>{supplier}</h4>\r\n                  <p>${amount.toFixed(2)}</p>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        <div className=\"recent-transactions\">\r\n          <h3>Recent Transactions</h3>\r\n          <table className=\"transactions-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Date</th>\r\n                <th>Supplier</th>\r\n                <th>Region</th>\r\n                <th>Amount</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {recentTransactions.map((item) => (\r\n                <tr key={item.id}>\r\n                  <td>{item.date}</td>\r\n                  <td>{item.supplier}</td>\r\n                  <td>{item.region}</td>\r\n                  <td>${item.amount}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n      </div> }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DashboardHome;"],"names":["_ref","message","_jsx","className","children","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","ArcElement","BarElement","Title","Tooltip","Legend","type","data","options","_jsxs","style","width","height","minWidth","Bar","Line","Pie","Bubble","DashboardHome","state","useDashboardContext","keyMetrics","useMemo","totalAmount","reduce","sum","item","amount","transactionCount","length","averageTransaction","trendsChartData","labels","map","date","datasets","label","borderColor","backgroundColor","fill","topSuppliers","supplierTotals","acc","supplier","Object","entries","sort","a","b","slice","recentTransactions","Date","getTime","_Fragment","isLoading","Loader","error","ErrorMessage","toFixed","ChartContainer","responsive","maintainAspectRatio","region","id"],"sourceRoot":""}